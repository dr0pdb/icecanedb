syntax = "proto3";
package icecanedbpb;

option go_package = "protogen/icecanedbpb";

// Check Fig.2 of the Raft Extended paper for more details.

// invoked by candidates to gather votes
message RequestVoteRequest {
  // candidates term
  uint64 term = 1;

  // candidate requesting the vote
  uint64 candidate_id = 2;

  // index of candidate's last log entry
  uint64 last_log_index = 3;

  // term of candidate's last log entry
  uint64 last_log_term = 4;
}

// response to the request vote rpc
message RequestVoteResponse {
  // current_term of the voter, for the candidate to update itself
  uint64 term = 1;

  // true if the vote was granted
  bool vote_granted = 2;

  // id of the voter who received the request.
  // not mentioned in the paper but might be good for debugging.
  uint64 voter_id = 3;
}

// invoked by leader to replicate log entries; also used as heartbeat
message AppendEntriesRequest {
  // leader's term
  uint64 term = 1;

  // leader's id so that follower can redirect clients.
  uint64 leader_id = 2;

  // index of log log entry immediately preceding new ones
  uint64 prev_log_index = 3;

  // term of prev_log_index entry
  uint64 prev_log_term = 4;

  // log entries to store (empty for heartbeat)
  repeated LogEntry entries = 5;

  // leader commitIndex
  uint64 leader_commit = 6;
}

// response to the append entry rpc
message AppendEntriesResponse {
  // current_term of the receiver, for the candidate to update itself
  uint64 term = 1;

  // true if follower contained entry matching prevLogIndex and prevLogTerm
  bool success = 2;

  // id of the responder
  uint64 responder_id = 3;
}

// a single log entry
message LogEntry {
  // entry contains the serialized term and string representation of the
  // command.
  bytes entry = 1;
}
