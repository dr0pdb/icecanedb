syntax = "proto3";
package icecanedbpb;

option go_package = "protogen/icecanedbpb";

enum IcecaneErrorType {
  // An internal error that couldn't be resolved
  InternalError = 0;

  // Something was not found
  NotFound = 1;

  // Transaction serialization error due to a conflicting write
  SerializationError = 2;
} 

message IcecaneError {
  IcecaneErrorType type = 1;

  // indicates if the client can retry this operation
  bool retryable = 2;

  string message = 3;
}

message GetRequest {
  Context context = 1;
  bytes key = 2;

  // txn_id indicates whether this request is part of any txn.
  // optional.
  uint64 txn_id = 3;
}

message GetResponse {
  // An empty value with found = true indicates deletion.
  bytes value = 1;
  IcecaneError error = 2;
  bool found = 3;
}

message SetRequest {
  Context context = 1;
  bytes key = 2;
  bytes value = 3;

  // txn_id indicates whether this request is part of any txn.
  // optional.
  uint64 txn_id = 4;
}

message SetResponse {
  bool success = 1;
  IcecaneError error = 2;
}

message DeleteRequest {
  Context context = 1;
  bytes key = 2;

  // txn_id indicates whether this request is part of any txn.
  // optional.
  uint64 txn_id = 3;
}

message DeleteResponse {
  bool success = 1;
  IcecaneError error = 2;
}

// TxnMode defines the mode of the txn.
// Default: ReadOnly
enum TxnMode {
  ReadOnly = 0;
  ReadWrite = 1;
}

message BeginTxnRequest {
  Context ctx = 1;
  TxnMode mode = 2;
}

message BeginTxnResponse {
  bool success = 1;
  uint64 txn_id = 2;
  IcecaneError error = 4;
}

message CommitTxnRequest {
  Context ctx = 1;
  uint64 txn_id = 2;
}

message CommitTxnResponse {
  bool success = 1;
  IcecaneError error = 3;
}

message RollbackTxnRequest {
  Context ctx = 1;
  uint64 txn_id = 2;
}

message RollbackTxnResponse {
  bool success = 1;
  IcecaneError error = 3;
}

message ScanRequest {}

message ScanResponse {}

// Context is the metadata that is present in every request.
message Context {}
